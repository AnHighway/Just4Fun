1.没有必要的话不要共享数据，容易造成线程间争抢资源造成结果出错。
2.实在要共享，利用
  1）atomic 原子操作 将数据操作变成原子操作 例如 atomic<int> var  atomic_int var 等
  2）mutex  临界区 mutex可以提供 mutex.lock()和mutex.unlock()函数	
  template<typename T>
	class LOCK {
		
	public:
		Lock(T& mutex) m_mutex { mutex }{
			m_mutex.lock();
		}
		~LOCK() { m_mutex.unlock(); }
	private :
			T& m_mutex;
	};
LOCK<mutex>lock(m_mutex)
简化版的。。。
其实在STL库里有，叫lock_guard;
可以利用它创建mutex;
lock_guard<mutex>lock(mutex);
