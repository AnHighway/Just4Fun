小Q有X首长度为A的不同的歌和Y首长度为B的不同的歌，现在小Q想用这些歌组成一个总长度正好为
K的歌单，每首歌最多只能在歌单中出现一次，在不考虑歌单内歌曲的先后顺序的情况下，请问有多少种组成歌单的方法。
可以看成类似01背包问题，不断的网需要拼凑的数量里加1，判断整首歌的长度K是否仍需要A和B长度的歌来拼接
#include <iostream>
 
#include <cstring>
 
using namespace std;
 
  
 
int K, A, X, B, Y;
 
int dp[201][1001];
 
int p[201];
 
  
 
int main()
 
{
 
    while(cin >> K)
 
    {
 
        cin >> A >> X >> B >> Y;
 
        memset(dp, 0, sizeof(dp));
 
        dp[0][0] = 1;
 
        for(int i = 1; i <= X; i++)
 
            p[i] = A;
 
        for(int j = X + 1; j <= X + Y; j++)
 
            p[j] = B;
 
        for(int i = 1; i <= X + Y; i++)
 
            for(int j = 0; j <= K; j++)
 
            {
 
                if(j >= p[i])
 
                    dp[i][j] = (dp[i - 1][j] % 1000000007 + dp[i - 1][j - p[i]] % 1000000007) % 1000000007;
 
                else
 
                    dp[i][j] = dp[i - 1][j] % 1000000007;
 
            }
 
        cout << dp[X + Y][K] % 1000000007 << endl;
 
    }
 
}


//另外一种思路


精妙之处就在于如何计算C<m,n>
比如：
205
1 92 4 92
中，可行的解有选92中选13个1、92中选48个4。C<92,48>怎么算？


利用数学归纳法：
由C(n,k) = C(n-1,k) + C(n-1,k-1）；
对应于杨辉三角：
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1

//小Q的歌单
#include<cstdio>
#include<iostream>
using namespace std;
 
long long c[105][105];
const int mod = 1000000007;
void init()//构建排列组合数组
{
    c[0][0]=1;
    for(int i=1;i<=100;i++){
        c[i][0]=1;
        for(int j=1;j<=100;j++){
            c[i][j] = (c[i-1][j-1]+c[i-1][j])%mod;
        }
    } 
}
 
int main()
{     
    int k,i,j,x,y,a,b;     
    long long sum;     
    init();     
    while(cin>>k>>a>>x>>b>>y)
    {         
        sum = 0;         
        if(a!=b)
        {             
            for(i=0;i<=x;i++)
            {                 
               for(j=0;j<=y;j++)
               {                     
                   if((i*a+j*b)>k)                         
                       break;                     
                   if((i*a+j*b)==k)//从长度为a的歌组里取i首和从长度为b的歌组里取j首组合为长度为K的歌
                   {                         
                      sum+=c[x][i]*c[y][j];                     
                   }                 
               }             
            }         
        }         
       printf("%ld\n",sum%1000000007);     
    }     
return 0;
} 
