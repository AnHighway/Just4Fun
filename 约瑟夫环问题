先创建一个循环链表，其中数据从0~n，输入n,k,m三个数，表示从第K个人开始报数，数到第M个数时将这个链表剔除。然后一直循环直到最后一个人被T出去

#include<iostream>
#include<stdlib.h>
#include<stdio.h>

typedef struct ListNode{
  int data;
  struct ListNode *next;
  }ListNode,*LinkList
  
  void Josephus(int n,int k,int m){
    /* 创建一个循环链表*/
    Linklist p,pre,curr;
    p=(LinkList)malloc(sizeof(ListNode));//头指针
    p->data=0;
    p->next=p;
    curr=p;
    for(int i=1;i<n;i++){
     auto t=(LinkList)malloc(sizeof(ListNode));
      t->data=i;
      t->next=curr->next;
      curr->next=t;
      curr=t;
       }
    /*创建完成*/   
       while(k--){
       pre=p;
       p=p->next;
       }//从0开始先到开始报数K的位置
      while(n--){
      for(int s=m-1;s--;pre=p,p=p->next);//从K开始循环向后移动到报M的位置。
      pre->next=p->next;
      printf("%d->"p->data);
      free(p);
      p=pre->next;
      }
       
  }
  
  int main(){
  josephus(13,4,1);
  }
  
  
  //另外一种使用递归得方法解决约瑟夫环问题
  //法1
  int Joseph(int m,int k)
 2 {
 3     if(m<=0||k<=0)
 4     {
 5         cout<<"error!"<<endl;
 6         return -1;
 7     }else
 8     {
 9         if(m==1)
10         {
11             return 0;
12         }else
13         {
14             return ((Joseph(m-1,k)+k)%m);
15         }
16     }
17 }

//法2 可以输出每次出队列的位置
int Joseph(int m,int k,int i)
{
    if(m<=0||k<=0||m<i)
    {
        cout<<"error"<<endl;
        return -1;

    }else
    {
        if(i==1)
        {
            return (m+k-1)%m;
        }else
        {
            return ((Joseph(m-1,k,i-1)+k)%m);
        }
    }
}

int main()
{   
    cout<<"递归方法一"<<endl;
    cout << Joseph(6,3) << endl;
    cout<<"递归方法二"<<endl;
    for(int i=1;i<=6;i++)
    {
        cout<<Joseph(6,3,i)<<endl;
    }
    getchar();
    return 0;
}
