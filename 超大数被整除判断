小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。

并且小Q对于能否被3整除这个性质很感兴趣。

小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。

被 2 整除  
特征是个位上是偶数；
被 3 整除  
特征是所有位数的和是 3 的倍数（例如：315 能被 3 整除，因为 3+1+5=9 是 3 的倍数
被 4 整除 
若一个整数的末尾两位数能被 4 整除，则这个数能被 4 整除。 
被 5 整除 
若一个整数的末位是 0 或 5，则这个数能被 5 整除。
被 6 整除 
若一个整数能被 2 和 3 整除，则这个数能被 6 整除。
被 8 整除 
若一个整数的未尾三位数能被 8 整除，则这个数能被 8 整除。
被 9 整除 
若一个整数的数字和能被 9 整除，则这个整数能被 9 整除

#include<iostream>
using namespace std;

int main()
{
  long long l,r count;
  cin>>l>>r;
  long long s=l*(l+1)/2;
  while(l<=r)
  {
  if(s%3==0) count++;
  l++;
  s+=l;
  }
cout<<count;
}
///这样会加快运算时间，比for循环快
